import tensorflow as tf

def cnn_model_fn(features, labels, mode):
    #input layer
    input_layer = tf.reshape(features["x"],[-1,28,28,1])


#COnvolutional Layer #1

    conv1 = tf.layers.conv2d(
        inputs=input_layer,
        filters=32,
        kernel_size=[5],
        padding="same",
        activation=tf.nn.relu)

    #Pooling Layer 1

    pool1 = tf.layers.max_pooling2d(
        inputs=conv1,
        pool_size=[2],
        strides=2,

    )

    # COnvolutional Layer #2

    conv2 = tf.layers.conv2d(
        inputs=pool1,
        filters=64,
        kernel_size=[5],
        padding="same",
        activation=tf.nn.relu)

    pool2 = tf.layers.max_pooling2d(
        inputs=conv2,
        pool_size=[2],
        strides=2,

    )
    # COnvolutional Layer #3

    conv3 = tf.layers.conv2d(
        inputs=pool2,
        filters=64,
        kernel_size=[5],
        padding="same",
        activation=tf.nn.relu)


    pool3 = tf.layers.max_pooling2d(
        inputs=conv3,
        pool_size=[2],
        strides=2,

    )
    #dense layer(fcn)

    pool2_flat = tf.reshape(pool3, [-1, 7*7*64])
    dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)
    dense1 = tf.layers.dense(inputs=dense, units=1024, activation=tf.nn.relu)
    dropout = tf.layers.dropout(inputs=dense1, rate=0.4, training=mode == tf.estimator.modekeys.TRAIN)

    logits = tf.layers.dense(inputs=dropout, units=10) #We create a dense
    # layer with 10 neurons (one for each target class 0â€“9), with linear activation (the default)

    loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)
    return loss
