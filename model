import tensorflow as tf

def cnn_model_fn(features, labels, mode):
    #input layer
    input_layer = tf.reshape(features["x"],[-1,28,28,1])


#COnvolutional Layer #1

    conv1 = tf.layers.conv2d(
        inputs=input_layer,
        filters=32,
        kernel_size=[5],
        padding="same",
        activation=tf.nn.relu)

    #Pooling Layer 1

    pool1 = tf.layers.max_pooling2d(
        inputs=conv1,
        pool_size=[2],
        strides=2,

    )

    # COnvolutional Layer #2

    conv2 = tf.layers.conv2d(
        inputs=pool1,
        filters=64,
        kernel_size=[5],
        padding="same",
        activation=tf.nn.relu)

    pool2 = tf.layers.max_pooling2d(
        inputs=conv2,
        pool_size=[2],
        strides=2,

    )
    # COnvolutional Layer #3

    conv3 = tf.layers.conv2d(
        inputs=pool2,
        filters=64,
        kernel_size=[5],
        padding="same",
        activation=tf.nn.relu)


    pool3 = tf.layers.max_pooling2d(
        inputs=conv3,
        pool_size=[2],
        strides=2,

    )
    #dense layer(fcn)

    pool2_flat = tf.reshape(pool3, [-1, 7*7*64])
    dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)
    dense1 = tf.layers.dense(inputs=dense, units=1024, activation=tf.nn.relu)
    dropout = tf.layers.dropout(inputs=dense1, rate=0.4, training=mode == tf.estimator.modekeys.TRAIN)

    logits = tf.layers.dense(inputs=dropout, units=10) #We create a dense
    # layer with 10 neurons (one for each target class 0â€“9), with linear activation (the default)
    
    #prediction
    predictions = {
    "classes": tf.argmax(input=logits, axis=1),
    "probabilities": tf.nn.softmax(logits, name="softmax_tensor")
    }
    if mode == tf.estimator.ModeKeys.PREDICT:
        return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)

    loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)
    return loss
    
    #train
    if mode == tf.estimator.ModeKeys.TRAIN:
        optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
         train_op = optimizer.minimize(
         loss=loss,
         global_step=tf.train.get_global_step())
         return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)
     
     #to add accuracy mteric in our model    
     eval_metric_ops = {
        "accuracy": tf.metrics.accuracy(
        labels=labels, predictions=predictions["classes"])}
        return tf.estimator.EstimatorSpec(
            mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)
#After building a model you should train and evaluate and also predict the output. in the main fun(), here is the steps of doing it:

def main(unused_argv):
#1) Load training and eval data
    mnist = tf.contrib.learn.datasets.load_dataset("mnist")
    train_data = mnist.train.images # Returns np.array
    train_labels = np.asarray(mnist.train.labels, dtype=np.int32)
    eval_data = mnist.test.images # Returns np.array
    eval_labels = np.asarray(mnist.test.labels, dtype=np.int32)
        
#2) Create the Estimator
    mnist_classifier = tf.estimator.Estimator(
    model_fn=cnn_model_fn, model_dir="/tmp/mnist_convnet_model") # change the directory manually
        
#3) Set up logging for predictions and  track progress during training
    tensors_to_log = {"probabilities": "softmax_tensor"}
    logging_hook = tf.train.LoggingTensorHook(
    tensors=tensors_to_log, every_n_iter=50)
       
       
#4) Train the model
    train_input_fn = tf.estimator.inputs.numpy_input_fn(
        x={"x": train_data},
        y=train_labels,
        batch_size=100,
        num_epochs=None,    #means that the model will train until the specified number of steps is reached.
        shuffle=True)
    mnist_classifier.train(
       input_fn=train_input_fn, 
       steps=20000,          #which means the model will train for 20,000 steps total
       hooks=[logging_hook]) #so that it will be triggered during training
           
#5)  Evaluate the model and print results
    eval_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": eval_data},
    y=eval_labels,
    num_epochs=1,
    shuffle=False)
    eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn)
    print(eval_results)    

#6) 
       
